################################################################
# Global configuration
################################################################

# Timeout in seconds.
# Duration to give active requests a chance to finish during hot-reloads
#
# Optional
# Default: 10
#
# graceTimeOut = 10

# Traefik logs file
# If not defined, logs to stdout
#
# Optional
#
# traefikLogsFile = "log/traefik.log"
traefikLogsFile = "{{ prefix_dir }}/var/log/traefik/traefik.log"

# Access logs file
#
# Optional
#
# accessLogsFile = "log/access.log"
accessLogsFile = "{{ prefix_dir }}/var/log/traefik/access.log"

# Log level
#
# Optional
# Default: "ERROR"
#
# logLevel = "ERROR"
logLevel = "DEBUG"

# Backends throttle duration: minimum duration between 2 events from providers
# before applying a new configuration. It avoids unnecessary reloads if multiples events
# are sent in a short amount of time.
#
# Optional
# Default: "2s"
#
# ProvidersThrottleDuration = "5s"

# If non-zero, controls the maximum idle (keep-alive) to keep per-host.  If zero, DefaultMaxIdleConnsPerHost is used.
# If you encounter 'too many open files' errors, you can either change this value, or change unlimited value.
#
# Optional
# Default: http.DefaultMaxIdleConnsPerHost
#
# MaxIdleConnsPerHost = 200

# If set to true invalid SSL certificates are accepted for backends.
# Note: This disables detection of man-in-the-middle attacks so should only be used on secure backend networks.
# Optional
# Default: false
#
InsecureSkipVerify = true

# Entrypoints to be used by frontends that do not specify any entrypoint.
# Each frontend can specify its own entrypoints.
#
# Optional
# Default: ["http"]
#
# defaultEntryPoints = ["http", "https"]


{% if traefik_acme_enable %}
# Enable ACME (Let's Encrypt): automatic SSL
#
# Optional
#
# [acme]
[acme]

# Email address used for registration
#
# Required
#
# email = "test@traefik.io"
email = "{{ traefik_acme_certs_email }}"

# File used for certificates storage.
# WARNING, if you use Traefik in Docker, don't forget to mount this file as a volume.
#
# Required
#
# storageFile = "acme.json"
{% if traefik_acme_use_staging_api %}
storageFile = "{{ prefix_dir }}/var/lib/traefik/acme-staging.json"
#storageFile = "{{ prefix_dir }}/var/lib/traefik/acme.json"
{% else %}
#storageFile = "{{ prefix_dir }}/var/lib/traefik/acme-staging.json"
storageFile = "{{ prefix_dir }}/var/lib/traefik/acme.json"
{% endif %}

# Entrypoint to proxy acme challenge to.
# WARNING, must point to an entrypoint on port 443
#
# Required
#
# entryPoint = "https"
entryPoint = "https"

# Enable on demand certificate. This will request a certificate from Let's Encrypt during the first TLS handshake for a hostname that does not yet have a certificate.
# WARNING, TLS handshakes will be slow when requesting a hostname certificate for the first time, this can leads to DoS attacks.
# WARNING, Take note that Let's Encrypt have rate limiting: https://community.letsencrypt.org/t/quick-start-guide/1631
#
# Optional
#
# onDemand = true
onDemand = true
# See actual rate limiting: <https://community.letsencrypt.org/t/rate-limits-for-lets-encrypt/6769>

# CA server to use
# Uncomment the line to run on the staging let's encrypt server
# Leave comment to go to prod
#
# Optional
#
{% if traefik_acme_use_staging_api %}
caServer = "https://acme-staging.api.letsencrypt.org/directory"
{% else %}
#caServer = "https://acme-staging.api.letsencrypt.org/directory"
{% endif %}

# Domains list
# You can provide SANs (alternative domains) to each main domain
#
# [[acme.domains]]
#   main = "local1.com"
#   sans = ["test1.local1.com", "test2.local1.com"]
# [[acme.domains]]
#   main = "local2.com"
#   sans = ["test1.local2.com", "test2x.local2.com"]
# [[acme.domains]]
#   main = "local3.com"
# [[acme.domains]]
#   main = "local4.com"

# A comprehensive certificate for all Gstack domain names
# [[acme.domains]]
#   main = "gstack.io"
#   sans = [ "www.gstack.io", "get.gstack.io", "docs.gstack.io", "slack.gstack.io", "gaproxy.gstack.io" ]


# Other example domains, related to the Gstack OpenShift Origin deployment
#
# api.c4.prototyp.it
# frontend-sample.apps.prototyp.it
# frontend-sample.apps.c4.prototyp.it
# hawkular-metrics.apps.c4.prototyp.it
# kibana.apps.c4.prototyp.it

{% endif %}{# traefik_acme_enable #}


# Entrypoints definition
#
# Optional
# Default:
# [entryPoints]
#   [entryPoints.http]
#   address = ":80"
#
# To redirect an http entrypoint to an https entrypoint (with SNI support):
# [entryPoints]
#   [entryPoints.http]
#   address = ":80"
#     [entryPoints.http.redirect]
#       entryPoint = "https"
#   [entryPoints.https]
#   address = ":443"
#     [entryPoints.https.tls]
#       [[entryPoints.https.tls.certificates]]
#       CertFile = "integration/fixtures/https/snitest.com.cert"
#       KeyFile = "integration/fixtures/https/snitest.com.key"
#       [[entryPoints.https.tls.certificates]]
#       CertFile = "integration/fixtures/https/snitest.org.cert"
#       KeyFile = "integration/fixtures/https/snitest.org.key"
#
# To redirect an entrypoint rewriting the URL:
# [entryPoints]
#   [entryPoints.http]
#   address = ":80"
#     [entryPoints.http.redirect]
#       regex = "^http://localhost/(.*)"
#       replacement = "http://mydomain/"

[entryPoints]
  [entryPoints.http]
  address = ":80"
  [entryPoints.https]
  address = ":443"
    [entryPoints.https.tls]
      [[entryPoints.https.tls.certificates]]
      CertFile = "{{ prefix_dir }}/etc/traefik/traefik-default.crt"
      KeyFile = "{{ prefix_dir }}/etc/traefik/traefik-default.key"
  # [entryPoints.doppler]
  # address = ":4443"
  #   [entryPoints.doppler.tls]
  #     [[entryPoints.doppler.tls.certificates]]
  #     CertFile = "{{ prefix_dir }}/etc/traefik/doppler.gstack.me.crt"
  #     KeyFile = "{{ prefix_dir }}/etc/traefik/doppler.gstack.me.key"

# Enable retry sending request if network error
#
# Optional
#
# [retry]

# Number of attempts
#
# Optional
# Default: (number servers in backend) -1
#
# attempts = 3

################################################################
# Web configuration backend
################################################################

# Enable web configuration backend
#
# Optional
#
# [web]
[web]

# Web administration port
#
# Required
#
# address = ":8080"
address = ":18080"

# SSL certificate and key used
#
# Optional
#
# CertFile = "traefik.crt"
# KeyFile = "traefik.key"

# Here we instead leverage the default certificate defined above
#CertFile = "{{ prefix_dir }}/etc/traefik/traefik.gstack.io.crt"
#KeyFile = "{{ prefix_dir }}/etc/traefik/traefik.gstack.io.key"

# Set REST API to read-only mode
#
# Optional
# ReadOnly = false
ReadOnly = false


################################################################
# File configuration backend
################################################################

# Enable file configuration backend
#
# Optional
#
# [file]
[file]

# Rules file
# If defined, traefik will load rules from this file,
# otherwise, it will load rules from current file (cf Sample rules below).
#
# Optional
#
# filename = "rules.toml"
filename = "{{ prefix_dir }}/etc/traefik/rules.toml"

# Enable watch file changes
#
# Optional
#
# watch = true
watch = true


{% if traefik_docker_enable %}
################################################################
# Docker configuration backend
################################################################

# Enable Docker configuration backend
#
# Optional
#
[docker]

# Docker server endpoint. Can be a tcp or a unix socket endpoint.
#
# Required
#
endpoint = "tcp://127.0.0.1:4000"

# Default domain used.
# Can be overridden by setting the "traefik.domain" label on a container.
#
# Required
#
domain = "{{ traefik_docker_default_domain }}"

# Enable watch docker changes
#
# Optional
#
watch = true

# Override default configuration template. For advanced users :)
#
# Optional
#
# filename = "docker.tmpl"

# Enable docker TLS connection
#
#  [docker.tls]
#  ca = "/etc/ssl/ca.crt"
#  cert = "/etc/ssl/docker.crt"
#  key = "/etc/ssl/docker.key"
#  insecureskipverify = true

{% endif %}{# traefik_docker_enable #}


################################################################
# Sample rules
################################################################
# [backends]
#   [backends.backend1]
#     [backends.backend1.circuitbreaker]
#       expression = "NetworkErrorRatio() > 0.5"
#     [backends.backend1.servers.server1]
#     url = "http://172.17.0.2:80"
#     weight = 10
#     [backends.backend1.servers.server2]
#     url = "http://172.17.0.3:80"
#     weight = 1
#   [backends.backend2]
#     [backends.backend2.LoadBalancer]
#       method = "drr"
#     [backends.backend2.servers.server1]
#     url = "http://172.17.0.4:80"
#     weight = 1
#     [backends.backend2.servers.server2]
#     url = "http://172.17.0.5:80"
#     weight = 2
#
# [frontends]
#   [frontends.frontend1]
#   backend = "backend2"
#     [frontends.frontend1.routes.test_1]
#     rule = "Host: test.localhost, other.localhost"
#   [frontends.frontend2]
#   backend = "backend1"
#   passHostHeader = true
#   entrypoints = ["https"] # overrides defaultEntryPoints
#     [frontends.frontend2.routes.test_1]
#     rule = "Host:{subdomain:[a-z]+}.localhost"
#   [frontends.frontend3]
#   entrypoints = ["http", "https"] # overrides defaultEntryPoints
#   backend = "backend2"
#     rule = "Path: /test, /other"
